import logging
import asyncio
from telethon import TelegramClient, events, Button
from mko_birth_reminder_bot.reminder import start_scheduler, check_missed_run

from mko_birth_reminder_bot.core import CONFIG
from mko_birth_reminder_bot.operator import Operator

logger = logging.getLogger(__name__)

client = TelegramClient(**CONFIG.TELETHON_API.client)



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
#
# TELETHON_API = {
#     "start_menu": [
#         [{"add_record": "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"}],
#         [{"update_record_by_id": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ id"},
#          {"delete_record_by_id": "–£–¥–∞–ª–∏—Ç—å –ø–æ id"}],
#         [{"import_csv": "–ò–º–ø–æ—Ä—Ç –∏–∑ CSV"}, {"export_csv": "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"}],
#         [{"delete_user": "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"}],
#     ],
#     "add_record_menu": [
#         [{"back_to_start": "–ù–∞–∑–∞–¥"}],
#         [{"first_name": "–ò–º—è"}, {"last_name": "–§–∞–º–∏–ª–∏—è"}],
#         [{"company": "–ö–æ–º–ø–∞–Ω–∏—è"}, {"position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å"}],
#         [{"gift_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–∞—Ä–∫–∞"}],
#         [{"birth_date": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"}],
#         [{"notice_before_days": "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å"}],
#         [{"confirm_record": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}]
#     ]
# }

DEFAULT_CAPTION = "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /start"


async def save_csv_file(event, upload_dir: str = CONFIG.CSV.READ_DATA.path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º CSV-—Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        event: –°–æ–±—ã—Ç–∏–µ Telethon.
        upload_dir: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    user_id = event.sender_id
    user_data[user_id]['params']['csv'] = None
    if event.file and event.file.mime_type == "text/csv":
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            user_data[user_id]['params']['csv'] = await event.download_media(file=upload_dir)
            return f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
    else:
        return "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª."


def get_csv_prompt(columns: dict = CONFIG.DATABASE.columns,
                   sep: str = CONFIG.CSV.READ_DATA.from_csv["sep"],
                   enc: str = CONFIG.CSV.READ_DATA.from_csv["encoding"]):
    text = [["–û–ê–û –ó–µ—Ç–∞", "–°–æ–∫–æ–ª–æ–≤–∞", "–ê–Ω–Ω–∞", "–ö–∞–¥—Ä—ã", "1-—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "1995-04-18", 7],
            ["–ü–ê–û –≠—Ç–∞", "–ö–æ–∑–ª–æ–≤", "–ò–≤–∞–Ω", "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", "VIP", "1978-09-23", 30]]
    names = [col_name for col_name, col_type in columns.items() if 'PRIMARY' not in col_type]
    csv_ex = [names] + text
    csv_ex = '\n'.join([sep.join(map(str, r)) for r in csv_ex])
    prompt = (f"üìÑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π, —Å–æ–±–ª—é–¥–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**"
              f"\n        - —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ `'{enc.upper()}'`"
              f"\n        - —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π"
              f"\n        - –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `'{sep}'`"
              f"\n        - —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `'dd/mm/yyyy'` –∏–ª–∏ `'dd.mm.yyyy'`"
              f"\n\n‚ùóÔ∏è **–ï—Å–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä–∞–Ω–µ–µ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:**"
              f"\n        - —É–¥–∞–ª–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü `id`\n"
              f"\n        - –æ—á–∏—Å—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å"
              f"\n\nüí° **–í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:**"
              f"```{csv_ex}```" )

    return prompt


# General functions
def make_menu(name, config):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    if name not in config:
        return
    level = config[name]
    menu = [
        [Button.inline(text, button.encode('UTF-8')) for item in row for button, text in item.items()]
        for row in level
    ]
    return menu


def get_prompt_from_config(choice, menu):
    """
    Recursively searches for a key in a nested dictionary or list structure.

    Parameters:
    ----------
    choice : str
        The key to search for.
    menu : dict or list
        The nested structure (dictionary or list) to search within.

    Returns:
    -------
    Any
        The value associated with the specified key, or None if not found.
    """
    # Base case: if the key exists at the current level of the dictionary
    if isinstance(menu, dict):
        if choice in menu:
            return menu[choice]
        # Recursively search in values of the dictionary
        for value in menu.values():
            result = get_prompt_from_config(choice, value)
            if result is not None:
                return result

    # If the current level is a list, iterate through its elements
    elif isinstance(menu, list):
        for item in menu:
            result = get_prompt_from_config(choice, item)
            if result is not None:
                return result

    # If no match is found, return None
    return None


async def handle_edit_respond(event, text, buttons, rewrite=True):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        event: —Å–æ–±—ã—Ç–∏–µ Telethon (CallbackQuery –∏–ª–∏ NewMessage).
        text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        buttons: –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        rewrite: True - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, False - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not rewrite:
        await event.respond(text, buttons=buttons)
    else:
        try:
            await event.edit(text, buttons=buttons)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await event.respond(text, buttons=buttons)


async def init_user(user_id):
    user_data[user_id] = {}
    await drop_user_state(user_id)


async def drop_user_state(user_id):
    user_data[user_id]['state'] = None
    user_data[user_id].pop('waited_param_name', None)
    user_data[user_id]['params'] = {}


async def ask_for_input(event, user_id, param_name, prompt_text):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (3 —É—Ä–æ–≤–µ–Ω—å).
    """
    user_data[user_id]['waited_param_name'] = param_name  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–∂–∏–¥–∞–µ—Ç—Å—è
    await event.edit(prompt_text)


async def handle_data_entry(event, user_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ 3 —É—Ä–æ–≤–Ω–µ.
    """
    param_name = user_data[user_id].get('waited_param_name')
    if param_name:
        user_data[user_id]['params'][param_name] = event.raw_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        buttons = [
            [Button.inline("–ü—Ä–∏–Ω—è—Ç—å", b"accept_input")],
            [Button.inline("–û—Ç–º–µ–Ω–∏—Ç—å", b"cancel_input")]
        ]
        await event.respond(f"–í—ã –≤–≤–µ–ª–∏: {event.raw_text}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:", buttons=buttons)


# Menu functions
async def show_start_menu(event, user_id, rewrite=True):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (1 —É—Ä–æ–≤–µ–Ω—å).
    """
    # –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ
    await drop_user_state(user_id)
    menu = make_menu("start_menu", CONFIG.TELETHON_API)
    await handle_edit_respond(event, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", buttons=menu, rewrite=rewrite)


async def show_add_record_menu(event, user_id, rewrite=True):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é 2 —É—Ä–æ–≤–Ω—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
    """
    menu = make_menu("add_record_menu", CONFIG.TELETHON_API)
    await handle_edit_respond(event, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:", buttons=menu, rewrite=rewrite)


async def validate_record(event, user_id):
    user_info = user_data[user_id].get('params', {})
    if 'birth_date' in user_info or user_data[user_id]['state'] == 'update_record_by_id_state':
        result = "\n".join(f"{key}: {value}" for key, value in user_info.items())
        await event.edit(f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{result}")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    else:
        await event.edit(f"–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.")
        msg = await client.send_message(event.chat_id, f'–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ.', buttons=None)
        prompt = f"–í–≤–µ–¥–∏—Ç–µ {get_prompt_from_config('birth_date', CONFIG.TELETHON_API)}"
        await ask_for_input(msg, user_id, 'birth_date', prompt)


@client.on(events.NewMessage(pattern="/start"))
async def start(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user_id = event.sender_id
    await init_user(user_id)
    await show_start_menu(event, user_id)


@client.on(events.CallbackQuery)
async def handle_callback(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é. –ö–ª—é—á–µ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø—É–Ω–∫—Ç –º–µ–Ω—é - —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å.
    –≠—Ç–æ—Ç —Ç–∏–ø –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ state –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ state –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É
    —Ñ—É–Ω–∫—Ü–∏–µ–π handle_text.

    """
    user_id = event.sender_id
    if user_id not in user_data:
        await init_user(user_id)

    data = event.data.decode('utf-8')

    operator: Operator = Operator(user_id)

    match data:

        # start menu
        case "add_record":
            user_data[user_id]['state'] = "add_record_state"
            await show_add_record_menu(event, user_id)

        case "back_to_start":
            await show_start_menu(event, user_id)

        # record_by_id
        case "update_record_by_id":
            user_data[user_id]['state'] = "update_record_by_id_state"

            await ask_for_input(
                event,
                user_id,
                'record_id',
                f"–í–≤–µ–¥–∏—Ç–µ id –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
            )

        case "delete_record_by_id":
            user_data[user_id]['state'] = "delete_record_by_id_state"

            await ask_for_input(
                event,
                user_id,
                'record_id',
                f"–í–≤–µ–¥–∏—Ç–µ id –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
            )

        # import / export
        case "import_csv":
            user_data[user_id]['state'] = "import_csv_state"
            await ask_for_input(
                event,
                user_id,
                'import_csv',
                get_csv_prompt()
            )

        case "export_csv":
            user_data[user_id]['state'] = "export_csv_state"

            file = operator.export_data()
            if file:
                caption = "–í–æ—Ç —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV."
                await client.send_file(event.chat_id, file, caption=caption)
                await asyncio.to_thread(operator.remove_tmp_file(file))
            else:
                caption = f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, "
                f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º."
                await client.send_message(user_id, caption)

        case "delete_user":
            # TODO –î–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id –∏–∑ –±–∞–∑—ã
            await event.edit("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
            await show_start_menu(event, user_id)

        # add_record_menu
        case "company" | "position" | "gift_category" | "first_name" | "last_name" | \
             "birth_date" | "notice_before_days" as choice:
            prompt = f"–í–≤–µ–¥–∏—Ç–µ {get_prompt_from_config(choice, CONFIG.TELETHON_API)}"
            await ask_for_input(event, user_id, choice, prompt)

        case "confirm_record":
            await validate_record(event, user_id)
            caption = DEFAULT_CAPTION
            match user_data[user_id]['state']:
                case "add_record_state":
                    caption = operator.add_record(
                        **user_data[user_id]['params']
                    )
                case "update_record_by_id_state":
                    caption = operator.update_record_by_id(
                        **user_data[user_id]['params']
                    )

            await client.send_message(user_id, caption)

            await show_start_menu(event, user_id, rewrite=False)

        # case "accept_input":
        #     await show_add_record_menu(event, user_id)

        case "cancel_input":
            param_name = user_data[user_id].get('waited_param_name')
            if param_name:
                user_data[user_id]['params'].pop(param_name, None)  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            await ask_for_input(event, user_id, param_name, f"–í–≤–µ–¥–∏—Ç–µ {param_name} —Å–Ω–æ–≤–∞:")


@client.on(events.NewMessage)
async def handle_text(event):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –º–µ–Ω—é,
     –∏—Å–ø–æ–ª—å–∑—É—è state –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é.
    """
    user_id = event.sender_id

    if user_id not in user_data:
        await init_user(user_id)

    operator: Operator = Operator(user_id)

    match user_data[user_id]['state']:
        case 'add_record_state':
            waited_param_name = user_data[user_id].pop('waited_param_name', None)
            user_data[user_id]['params'][waited_param_name] = event.raw_text
            await show_add_record_menu(event, user_id)

        case 'update_record_by_id_state':
            waited_param_name = user_data[user_id].pop('waited_param_name', None)
            user_data[user_id]['params'][waited_param_name] = event.raw_text
            await show_add_record_menu(event, user_id)

        case 'delete_record_by_id_state':
            # waited_param_name = user_data[user_id].pop('waited_param_name', None)
            # user_data[user_id]['params'][waited_param_name] = event.raw_text

            record_id = event.raw_text
            caption = operator.delete_record_by_id(record_id)
            await client.send_message(event.chat_id, caption)
            await drop_user_state(user_id)

        case 'import_csv_state':
            response = await save_csv_file(event)
            msg = await event.respond(response)
            file = user_data[user_id]['params']['csv']

            if file:
                text = operator.import_data(file)
                msg = await msg.respond(text)

        case 'export_csv_state':
            # export CSV –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ CallBack
            pass

        case 'delete_user_state':
            # delete_user_state –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ CallBack
            pass
        case _:
            pass


async def main():
    """
    The main entry point for running the Telegram bot.
    """

    await client.start(bot_token=CONFIG.TELETHON_API.bot_token)
    logger.info("Telegram bot is running.")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await start_scheduler(client)
    await check_missed_run(client)

    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
